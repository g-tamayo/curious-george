# SPF Check Tool
# Author: George Tamayo
# Description: This tool checks sender IP to determine if they are
# an authorized sender, and shows which mechanisms matched (if pass).

import re
import sys
import itertools
import ipaddress
import DNS
from pythonds import basic
from enum import Enum, unique


__author__ = 'George Tamayo'


@unique
class MechType(Enum):

    ip = 'ip'
    a = 'a'
    mx = 'mx'
    ptr = 'ptr'
    include = 'include'
    redirect = 'redirect'
    exists = 'exists'
    cidr = '/'


class SpfRecord:  # Class to create SPFRecord objects for domains being tested

    def __init__(self, domain):
        self.domain = domain
        self.dns_lookups = 0
        self.txt = []
        self.spf = None
        self.redirects = []
        self.mechanisms = []
        self.spf_flag = None
        self.permerror = ''
        self.rfc7208 = False


def spf_retrieve(s_domain):   # Iterates through txt records to find SPF record

    s_domain.txt = DNS.dnslookup(s_domain.domain, 'txt')  ## Perform DNS query on domain
    vspf = []
    for record in s_domain.txt:
        if b'v=spf1' in record[0]:
            vspf.append(record[0].decode('utf-8'))
    if len(vspf) > 1:  # If multiple SPF records found, results in PermError
        s_domain.permerror = 'Multiple SPF records exist for domain %s\n' % s_domain.domain
        s_domain.spf = []
    elif len(vspf) == 1:
        s_domain.spf = vspf[0]
        s_domain.mechanisms, s_domain.spf_flag = mechanisms_retrieve(s_domain)
    else:
        s_domain.spf = []  # If none found, set spf as empty list


def mechanisms_retrieve(m_domain):

    if MechType.redirect.value in m_domain.spf:   # If redirect, set mechanism to redirect to the next domain
        spf, redir = m_domain.spf.split()
        redir_domain = redir.split('=')[1]
        return redir_domain, MechType.redirect.value
    elif not m_domain.spf:
        return m_domain.spf, None
    else:
        _, *mechs, flag = m_domain.spf.split()
        return mechs, flag  # Returns mechanisms as list, and last mechanism as flag


def ip_mech_check(spf_ip, current_domain, first_domain):  # Main function that iterates through mechanisms,

    spf_match = False
    matches = basic.Stack()  # Creates stack to keep track of any matches
    checking = current_domain.mechanisms
    include_end = None  # If an include is detected, set this variable to the final mechanism in the new set of mechs

    for current_mech in checking:

        try:  # If mechanism is set for self-check (eg, a, mx, ptr) then set current domain as argument
            mechanism, argument = current_mech.split(':', 1)  # Change variables for readability
        except ValueError:
            mechanism, argument = current_mech, current_domain.domain

        if mechanism == MechType.include.value:  # Include detected, insert new SPF record into list of mechanisms
            include_domain = SpfRecord(argument)
            spf_retrieve(include_domain)

            if not include_domain.mechanisms:
                first_domain.permerror = argument  # If include lookup fails, check exits with PermError
                break
            else:
                first_domain.dns_lookups += 1
                include_end = include_domain.mechanisms[-1]
                new_index = 1

            for new_mech in include_domain.mechanisms:
                checking.insert(checking.index(current_mech) + new_index, new_mech)  # Insert new mechs into checking
                new_index += 1
            matches.push(current_mech)  # Push mechanism from top level record in case of match

        else:
            spf_match = spf_mech_check(spf_ip, mechanism, argument, first_domain)
            if spf_match is True:
                matches.push(current_mech)  # If match found, push current_mech into matches list
                break
            elif current_mech == include_end:  # If include mechanism reaches end, pop mechanism from matches
                matches.pop()

    if spf_match is True:
        return matches.items
    else:
        return None


def spf_mech_check(spf_ip, mechanism, argument, first_domain):  # Routes to proper function based on mechanism type

    if MechType.ip.value in mechanism:
        return ip_check(spf_ip, argument)
    elif MechType.a.value in mechanism:
        return a_check(spf_ip, mechanism, argument, first_domain)
    elif MechType.mx.value in mechanism:
        return mx_check(spf_ip, mechanism, argument, first_domain)
    elif MechType.ptr.value in mechanism:
        return ptr_check(spf_ip, argument, first_domain)
    elif MechType.exists.value in mechanism:
        return exists_check(argument, first_domain)


def ip_check(ip, match):

    return ip in ipaddress.ip_network(match, strict=False)  # Defaults to /32 if no cidr-length detected


def a_check(ipa, mech, arg, o_domain):

    o_domain.dns_lookups += 1  # Functions that require a dns query increments dns count in SPFRecord object
    if MechType.cidr.value in mech:
        domain_, cidr = arg.split(MechType.cidr.value)  # If cidr-length detected, split argument to obtain cidr
        match_list = DNS.dnslookup(domain_, MechType.a.value)
        for a_ip in match_list:  # Iterate through a records for match
            if ipa in ipaddress.ip_network(a_ip + MechType.cidr.value + cidr, strict=False):
                return True
    else:
        match_list = DNS.dnslookup(arg, MechType.a.value)
        if str(ipa) in match_list:
            return True
    return False


def mx_check(ipmx, mech, arg, o_domain):

    o_domain.dns_lookups += 1
    if MechType.cidr.value in mech:
        _, cidr = arg.split(MechType.cidr.value)
        mx_records = sorted(DNS.dnslookup(arg, MechType.mx.value))  # Sort mx records based on priority
        mxrr_ip = []
        for priority, mx_rr in mx_records:
            mxrr_ip.append(DNS.dnslookup(mx_rr, MechType.a.value))
        mx_a = list(itertools.chain.from_iterable(mxrr_ip))
        for a_ip in mx_a:
            if ipmx in ipaddress.ip_network(a_ip + MechType.cidr.value + cidr, strict=False):
                return True
    else:
        mx_records = sorted(DNS.dnslookup(arg, MechType.mx.value))
        for priority, mx_rr in mx_records:
            if a_check(ipmx, MechType.a.value, mx_rr, o_domain):
                return True
    return False


def ptr_check(ipp, arg, o_domain):
    
    o_domain.dns_lookups += 1
    o_domain.rfc7208 = True  # Sets rfc7208 value to True if PTR lookup requested (for RFC 7208 violation)
    ip_ptr = DNS.revlookupall(str(ipp))
    for ptr_rr in ip_ptr:
        if arg in ptr_rr:
            return True
        elif a_check(ipp, MechType.a.value, ptr_rr, o_domain):
            return True
    return False


def exists_check(arg, o_domain):
    
    o_domain.dns_lookups += 1
    if DNS.dnslookup(arg, MechType.a.value):  # If lookup returns record, check passes
        return True
    else:
        return False


def redirect(redirect_domain):
    
    """
    If spf_flag is set for redirect, create additional SPFRecord object
    with domain listed (eg, redirect:otherdomain.com)
    :param redirect_domain:
    """
    namespace = [redirect_domain]
    while True:
        if namespace[-1].spf_flag == MechType.redirect.value:
            redirect_domain.redirects.append('redirect=' + namespace[-1].mechanisms)
            temp_domain = SpfRecord(namespace[-1].mechanisms)
            namespace.append(temp_domain)
            spf_retrieve(temp_domain)
            redirect_domain.dns_lookups += 1
        else:
            break
    return namespace[-1]


def spf_fail(flag):   # Defines the mechanism and flag for SPF decisions
    
    actions = {
        '+': 'Pass',
        '-': 'Fail',
        '~': 'SoftFail',
        '?': 'Neutral'
    }
    return actions[flag[0]]


def flag_result(flag, s_ip, dom):  # Retrieves result/response if no matches prior to last mechanism (eg, ~all)
    
    flag_mechanisms = {
        '+': 'SPF Policy allows sender with %s ' % flag,
        '-': 'SPF Policy does not authorize %s on behalf of "%s"' % (s_ip, dom),
        '~': 'SPF Policy does not authorize %s on behalf of %s'
             '\nAccept and mark the message' % (s_ip, dom),
        '?': 'SPF Policy does not explicitly define if sender is authorized or not'
    }
    return flag_mechanisms[flag[0]]


# Primary Code

def main():

    try:
        ip = sys.argv[1]
        check_ip = ipaddress.ip_address(ip)
    except (ValueError, IndexError):
        print('\nPlease enter a valid IP\n')
        check_ip = None

    try:  # Detects if domain name or email address is entered for query.
        if re.search('@[\-A-Za-z0-9]+\.[A-Za-z]+\.?[A-Za-z]i+$', sys.argv[2]):
            strip = re.search('@([\-A-Za-z0-9]+\.[A-Za-z]+\.?[A-Za-z]+)$', sys.argv[2])  #Strip user@ if address
            sys.argv[2] = strip.groups()[0]
            check_domain = sys.argv[2]
        elif re.search('^[\-A-Za-z0-9]+\.[A-Za-z]+\.?[A-Za-z]+$', sys.argv[2]):
            check_domain = sys.argv[2]
        else:
            raise NameError
    except (IndexError, NameError):
        print('\nPlease enter a valid domain or email address\n')  # If not a valid domain/address, set empty domain.
        check_domain = None
    except DNS.Base.TimeoutError:  # Temporary DNS error
        print('\nDNS Temp Error')
        sys.exit(0)

    if check_domain and check_ip:  # If both valid ip and domain, continue with SPF check
        main_check(check_domain, check_ip)
    else:
        print('Examples\nspfcheck 127.0.0.1 example.com\nspfcheck 127.0.0.1 example@example.com')
        sys.exit(0)


def main_check(domain, ip):

    original_domain = SpfRecord(domain)
    spf_retrieve(original_domain)
    original_domain.dns_lookups += 1

    if original_domain.spf_flag == MechType.redirect.value:  # If redirect detected, obtain redirect domain SPF record
        spf_domain = redirect(original_domain)
    else:
        spf_domain = original_domain

    spf_result = ip_mech_check(ip, spf_domain, original_domain)
    results(ip, spf_domain, original_domain, spf_result)


def results(ip, c_domain, o_domain, result):

    total_dns = o_domain.dns_lookups
    spf_flag = c_domain.spf_flag

    print('\nSPF Result' + '\n' + '-' * 11)  # Following formats results and prints out in readable format
    if result and total_dns > 10:
        print('Result: Pass')
        print('***** PermError for RFC violation *****')
        print('%s is an authorized sender on behalf of %s' % (ip, o_domain.domain))
        print('Mechanism: ' + '\n\t  ---> '.join(o_domain.redirects + result))
    elif result:
        print('Result: Pass')
        print('%s is an authorized sender on behalf of %s' % (ip, o_domain.domain))
        print('Mechanism: ' + '\n\t  ---> '.join(o_domain.redirects + result))
    elif o_domain.spf and o_domain.permerror and o_domain.permerror != o_domain.domain:
        print('PermError')
        print('An "include" mechanism returned no SPF records')
    elif not result and spf_flag:
        print('Result: ' + spf_fail(spf_flag))
        print(flag_result(spf_flag, ip, o_domain.domain))
    else:
        print('None')

    print('\nAdditional Information' + '\n' + '-' * 22)
    if total_dns > 10:
        print('PermError\nToo many DNS lookups (RFC 4408)')
    if not o_domain.txt:
        print('No valid SPF record exists for "%s"' % o_domain.domain)
    if o_domain.spf and o_domain.permerror and o_domain.permerror != o_domain.domain:
        print('Failed Mechanism: include:%s' % o_domain.permerror)
    if o_domain.rfc7208:
        print('Warning: PTR was used as a check, this is a violation of RFC 7208.')
    print('DNS Queries Performed: %i' % total_dns)

main()
