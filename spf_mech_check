# SPF Check Tool
# Version: 1.1
# Author: George Tamayo
# Description: This tool checks sender IP to determine if they are
# an authorized sender, and shows which mechanisms matched (if pass).

import itertools
import re
import sys
from pythonds import basic
import ipaddress
import DNS


class SpfRecord:  # Class to create SPF records for domains being tested


    def __init__(self, domain, original_domain):
        self.domain = domain
        self.original = original_domain
        self.dns_lookups = 0
        self.txt = []
        self.spf = None
        self.redirects = []
        self.mechanisms = []
        self.spf_flag = None
        self.permerror = ''
        self.rfc7208 = False

    def txt_retrieve(self):
        self.txt = DNS.dnslookup(self.domain, 'txt')  ## Perform DNS query on domain
        self.dns_lookups += 1
        self.spf = self.spf_retrieve()
        self.mechanisms, self.spf_flag = self.mechanisms_retrieve()

    def spf_retrieve(self):   # Iterates through txt records to find SPF record
        vspf = []
        for record in self.txt:
            if b'v=spf1' in record[0]:
                vspf.append(record[0].decode('utf-8'))
        if len(vspf) > 1:
            self.permerror = 'Multiple SPF records exist for domain %s\n' % self.domain
            return []
        elif len(vspf) == 1:
            return vspf[0]
        else:
            return []

    def mechanisms_retrieve(self):
        if 'redirect' in self.spf:   # If redirect is in record, set mechanism to redirect to the next domain
            spf, redir = self.spf.split()
            redir_domain = redir.split('=')[1]
            return redir_domain, 'redirect'
        elif not self.spf:
            return self.spf, None
        else:
            _, *mechs, flag = self.spf.split()
            return mechs, flag


def ip_mech_check(spf_ip, current_domain, first_domain):  # Main function that iterates through mechanisms,

    spf_match = False
    matches = basic.Stack()
    checking = current_domain.mechanisms
    include_end = None

    for current_mech in checking:

        try:
            mechanism, argument = current_mech.split(':', 1)  # Change variables for readability
        except ValueError:
            mechanism, argument = current_mech, current_domain.domain

        if mechanism == 'include':
            include_domain = SpfRecord(argument, first_domain.domain)
            include_domain.txt_retrieve()
            if not include_domain.mechanisms:
                first_domain.permerror = argument
                break
            else:
                first_domain.dns_lookups += 1
                include_end = include_domain.mechanisms[-1]
                new_index = 1

            for new_mech in include_domain.mechanisms:
                checking.insert(checking.index(current_mech) + new_index, new_mech)
                new_index += 1
            matches.push(current_mech)

        else:
            spf_match = spf_mech_check(spf_ip, mechanism, argument, first_domain)
            if spf_match is True:
                matches.push(current_mech)
                break
            elif current_mech == include_end:
                matches.pop()

    if spf_match is True:
        return matches.items
    else:
        return None


def spf_mech_check(spf_ip, mechanism, argument, first_domain):
    if 'ip' in mechanism:
        return ip_check(spf_ip, argument)
    elif 'a' in mechanism:  # Checks A/AAAA records for both ipv4 and ipv6
        return a_check(spf_ip, mechanism, argument, first_domain)
    elif 'mx' in mechanism:
        return mx_check(spf_ip, mechanism, argument, first_domain)
    elif 'ptr' in mechanism:
        return ptr_check(spf_ip, argument, first_domain)
    elif 'exists' in mechanism:
        return exists_check(argument, first_domain)


def ip_check(ip, match):
    return ip in ipaddress.ip_network(match, strict=False)


def a_check(ipa, mech, arg, o_domain):

    o_domain.dns_lookups += 1  # Functions that require a dns query increments dns count in SPFRecord object
    if '/' in mech:
        domain_, cidr = arg.split('/')
        match_list = DNS.dnslookup(domain_, 'a')
        for a_ip in match_list:
            if ipa in ipaddress.ip_network(a_ip + '/' + cidr, strict=False):
                return True
    else:
        match_list = DNS.dnslookup(arg, 'a')
        if str(ipa) in match_list:
            return True
    return False


def mx_check(ipmx, mech, arg, o_domain):
    o_domain.dns_lookups += 1
    if '/' in mech:
        _, cidr = arg.split('/')
        mx_records = sorted(DNS.dnslookup(arg, 'mx'))
        mxrr_ip = []
        for priority, mx_rr in mx_records:
            mxrr_ip.append(DNS.dnslookup(mx_rr, 'a'))
        print(mxrr_ip)
        mx_a = list(itertools.chain.from_iterable(mxrr_ip))
        print(mx_a)
        for a_ip in mx_a:
            if ipmx in ipaddress.ip_network(a_ip + '/' + cidr, strict=False):
                return True
    else:
        mx_records = sorted(DNS.dnslookup(arg, 'mx'))
        for priority, mx_rr in mx_records:
            if a_check(ipmx, 'a', mx_rr, o_domain):
                return True
    return False


def ptr_check(ipp, arg, o_domain):
    o_domain.dns_lookups += 1
    o_domain.rfc7208 = True
    try:
        ip_ptr = DNS.revlookupall(str(ipp))
        for ptr_rr in ip_ptr:
            if arg in ptr_rr:
                return True
            elif a_check(ipp, 'a', ptr_rr, o_domain):
                return True
        return False
    except DNS.Base.ServerError:   ### Returns False is DNS query does not return any records.
        return False


def exists_check(arg, o_domain):
    o_domain.dns_lookups += 1
    try:
        DNS.dnslookup(arg, 'a')
        return True
    except DNS.Base.ServerError:
        return False


def redirect(redirect_domain):

    """
    If spf_flag is set for redirect, create additional SPFRecord object
    with domain listed (eg, redirect:otherdomain.com)
    :param redirect_domain:
    """
#    print('redirect')
    namespace = [redirect_domain]
    while True:
        if namespace[-1].spf_flag == 'redirect':
            redirect_domain.redirects.append('redirect=' + namespace[-1].mechanisms)
            temp_domain = SpfRecord(namespace[-1].mechanisms, redirect_domain)
            namespace.append(temp_domain)
            namespace[-1].txt_retrieve()
            redirect_domain.dns_lookups += 1
        else:
            break
    return namespace[-1]


def spf_fail(flag):   ### Following functions define the mechanism, and flag for SPF decisions.

    actions = {
        '+': 'Pass',
        '-': 'Fail',
        '~': 'SoftFail',
        '?': 'Neutral'
    }
    return actions[flag[0]]


def flag_result(flag, s_ip, dom):

    flag_mechanisms = {
        '+': 'SPF Policy allows sender with %s ' % flag,
        '-': 'SPF Policy does not authorize %s on behalf of "%s"' % (s_ip, dom),
        '~': 'SPF Policy does not authorize %s on behalf of %s'
             '\nAccept and mark the message' % (s_ip, dom),
        '?': 'SPF Policy does not explicitly define if sender is authorized or not'
    }
    return flag_mechanisms[flag[0]]


# Primary Code

def main():

    sys.argv = ['spf', '64.18.12.2', 'chipstechnologygroup.com']

    try:
        ip = sys.argv[1]
        check_ip = ipaddress.ip_address(ip)
    except (ValueError, IndexError):
        print('\nPlease enter a valid IP\n')
        check_ip = None

    try:
        if re.search('@[\-A-Za-z0-9]+\.[A-Za-z]+\.?[A-Za-z]i+$', sys.argv[2]):
            strip = re.search('@([\-A-Za-z0-9]+\.[A-Za-z]+\.?[A-Za-z]+)$', sys.argv[2])
            sys.argv[2] = strip.groups()[0]
            check_domain = sys.argv[2]
        elif re.search('^[\-A-Za-z0-9]+\.[A-Za-z]+\.?[A-Za-z]+$', sys.argv[2]):
            check_domain = sys.argv[2]
        else:
            raise NameError
    except (IndexError, NameError):
        print('\nPlease enter a valid domain or email address\n')
        check_domain = None
    except DNS.Base.TimeoutError:
        print('\nDNS Temp Error')
        sys.exit(0)

    if check_domain and check_ip:
        main_check(check_domain, check_ip)
    else:
        print('Examples\nspfcheck 127.0.0.1 example.com\nspfcheck 127.0.0.1 example@example.com')
        sys.exit(0)


def main_check(domain, ip):

    original_domain = SpfRecord(domain, domain)
    original_domain.txt_retrieve()

    if original_domain.spf_flag == 'redirect':
        spf_domain = redirect(original_domain)
    else:
        spf_domain = original_domain

    spf_result = ip_mech_check(ip, spf_domain, original_domain)

    results(ip, spf_domain, original_domain, spf_result)


def results(ip, c_domain, o_domain, result):

    total_dns = o_domain.dns_lookups
    spf_flag = c_domain.spf_flag

    print('\nSPF Result' + '\n' + '-' * 11)  # Following formats results and prints out in readable format
    if result and total_dns > 10:
        print('Result: Pass')
        print('***** PermError for RFC violation *****')
        print('%s is an authorized sender on behalf of %s' % (ip, o_domain.domain))
        print('Mechanism: ' + '\n\t  ---> '.join(o_domain.redirects + result))
    elif result:
        print('Result: Pass')
        print('%s is an authorized sender on behalf of %s' % (ip, o_domain.domain))
        print('Mechanism: ' + '\n\t  ---> '.join(o_domain.redirects + result))
    elif o_domain.spf and o_domain.permerror and o_domain.permerror != o_domain.domain:
        print('PermError')
        print('An "include" mechanism returned no SPF records')
    elif not result and spf_flag:
        print('Result: ' + spf_fail(spf_flag))
        print(flag_result(spf_flag, ip, o_domain.domain))
    else:
        print('None')

    print('\nAdditional Information' + '\n' + '-' * 22)
    if total_dns > 10:
        print('PermError\nToo many DNS lookups (RFC 4408)')
    if not o_domain.txt:
        print('No valid SPF record exists for "%s"' % o_domain.domain)
    if o_domain.spf and o_domain.permerror and o_domain.permerror != o_domain.domain:
        print('Failed Mechanism: include:%s' % o_domain.permerror)
    if o_domain.rfc7208:
        print('Warning: PTR should not be used (RFC 7208)')
    print('DNS Queries Performed: %i' % total_dns)

main()
