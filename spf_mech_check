## SPF
import DNS, ipaddress
import itertools


class SpfRecord:


    def __init__(self, domain):
        self.domain = domain
        if DNS.dnslookup(domain,'txt'):
            self.spf = self.spf_retrieve()
            self.txt = DNS.dnslookup(self.domain, 'txt')
            self.spf_version, self.mechanisms, self.spf_flag = self.mechanisms_retrieve()
            self.permerror = False
        else:
            self.spf = None
            self.spf_flag = ''
            self.mechanisms = ''


    def spf_retrieve(self):
        for record in self.txt:
            if b'v=spf1' in record[0]:
                return record[0].decode('utf-8')
            else:
                return None

    def mechanisms_retrieve(self):
        if 'redirect' in self.spf:
            spf, redir = self.spf.split()
            redir_domain = redir.split('=')[1]
            return spf, redir_domain, 'redirect'
        else:
            spfv, *mechs, flag = self.spf.split()
            return spfv, sorted(mechs, reverse=True), flag

    def __next__(self):
        for mech in self.mechanisms:
            if len(self.mechanisms) > 0:
                return self.mechanisms.pop()
            else:
                return None

    def setPermError(self):
        self.permerror = True


def ip_mech_check(ip, domain):

    domains = {}
    namespace = []
    spf_ip = ipaddress.ip_address(ip)
    domains[domain] = SpfRecord(domain)
    namespace.append(domain)

    spf_match = False
    matches = []

    while True:

        if domains[namespace[-1]].spf_flag == 'redirect':
            namespace.append(domains[namespace[-1]].mechanisms)
            domains[namespace[-1]] = SpfRecord(namespace[-1])
            dns_lookups()
        else:
            break

    while spf_match is False:

        current = next(domains[namespace[-1]])

        if not current:
            break

        else:

            current = current.split(':')

            if current[0] == 'ip6' and spf_ip.version == 6:
                spf_match = ip6_check(spf_ip, current[1])

            elif current[0] == 'ip4' and spf_ip.version == 4:
                spf_match = ip4_check(spf_ip, current[1])

            elif 'a' in current[0]:
                if len(current) == 1 and '/' in current[0]:
                    a_subnet = current[0].split('/')
                    spf_match = a_subnet_check(spf_ip, a_subnet[1])
                elif len(current) == 1:
                    spf_match = a_check(spf_ip, namespace[1])
                elif '/' in current[1]:
                    a_subnet = current[1].split('/')
                    spf_match = a_subnet_check(spf_ip, a_subnet)
                else:
                    spf_match = a_check(spf_ip, current[1])

            elif 'mx' in current[0]:
                if len(current) == 1 and '/' in current[0]:
                    mx_subnet = current[0].split('/')
                    spf_match = mx_subnet_check(spf_ip, [namespace[-1] + mx_subnet[1]])
                elif len(current) == 1:
                    spf_match = mx_check(spf_ip, namespace[-1])
                elif '/' in current[1]:
                    spf_match = mx_subnet_check(spf_ip, current[1])
                else:
                    spf_match = mx_check(spf_ip, current[1])

            elif 'ptr' in current[0]:
                if len(current) == 1:
                    spf_match = ptr_check(spf_ip, namespace[1])
                else:
                    spf_match = ptr_check(spf_ip, current[1])

            elif 'exists' in current[0]:
                try:
                    spf_match = len(DNS.dnslookup(current[1],'a')) > 0
                except DNS.Base.TimeoutError:
                    continue

            elif 'include' in current[0]:
                domains[current[1]] = SpfRecord(current[1])
                include_check = ip_mech_check(spf_ip, current[1])
                if domains[current[1]].spf and include_check:
                    matches.append(include_check)
                    spf_match = True
                elif not domains[current[1]].spf:
                    domains[current[1]].setPermError()
                    break


    if spf_match is True:
        matches.append(':'.join(current))
        result = matches
        return result
    else:
        return None


def ip6_check(ip, match):
    return ip in ipaddress.ip_network(match)


def ip4_check(ip, match):
    return ip in ipaddress.ip_network(match)


def a_check(ip, match):

    dns_lookups()
    match_list = DNS.dnslookup(match,'a')
    if str(ip) in match_list:
        return True
    else:
        return False


### Arguments passed are connecting ip and [domain, cidr-length]
def a_subnet_check(ip, match):

    dns_lookups()
    match_list = DNS.dnslookup(match[0],'a')
    cidr = match[1]
    for a_ip in match_list:
        if ip in ipaddress.ip_network(a_ip + '/' + cidr, strict=False):
            return True
    return False


def mx_check(ip, match):

    dns_lookups()
    mx_records = sorted(DNS.dnslookup(match, 'mx'))
    for priority, mx_rr in mx_records:
        if a_check(ip, mx_rr) is True:
            return True
    return False


### Arguments passed are connecting ip and [domain, cidr-length]
def mx_subnet_check(ip, mxrr):

    dns_lookups()
    mx_records = sorted(DNS.dnslookup(mxrr[0],'mx'))
    cidr = mxrr[1]
    mxrr_ip = []
    for priority, mxrr in mx_records:
        mxrr_ip.append(DNS.dnslookup(mxrr,'a'))
    mx_a = list(itertools.chain.from_iterable(mxrr_ip))
    for a_ip in mx_a:
        if ip in ipaddress.ip_network(a_ip + '/' + cidr, strict=False):
            return True
    return False


def ptr_check(ip, domain):

    dns_lookups()
    ip_ptr = DNS.revlookupall(ip)
    for ptr_rr in ip_ptr:
        if domain in ptr_rr:
            return True
        elif a_check(ip, ptr_rr):
            return True
    return False


def dns_lookups():

    global dns_lookups
    dns_lookups += 1


def flatten(results):

    temp = results
    while len(temp) > 0:
        yield temp.pop()
        try:
            temp = temp[0]
        except IndexError:
            break


ip = 'FE80::1'
domain = 'the-optional.com'
spf_result = ip_mech_check(ip, domain)


if spf_result:
    output = list(flatten(spf_result))
    print('%s is an authorized sender on behalf of %s' % (ip, domain))
    print(' ---> '.join(output))
else:
    print('SPF did not pass')
